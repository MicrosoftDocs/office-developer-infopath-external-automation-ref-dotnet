<Type Name="EventManager" FullName="Microsoft.Office.InfoPath.EventManager">
  <TypeSignature Language="C#" Value="public abstract class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.InfoPath.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Used to initialize and bind event handlers in the <b>InternalStartup</b> method of a form template.</summary>
    <remarks>
      <para>The <b>EventManager</b> class is used by InfoPath to bind event handlers for all of the events implemented by the <see cref="T:Microsoft.Office.InfoPath.ControlEvents" />, <see cref="T:Microsoft.Office.InfoPath.FormEvents" />, and <see cref="T:Microsoft.Office.InfoPath.XmlEvents" /> classes in the <b>InternalStartup</b> method at the beginning of the <b>FormCode</b> class in a managed code form template. At run time, the <b>InternalStartup</b> method is executed when the form template is opened to initialize the binding of all event handlers.</para>
      <para>
        <b>Note</b>: When a form template is opened in InfoPath, the <b>InternalStartup</b> method is called whenever a user opens the form template. Whereas, when a form template is opened in a Web browser from an appropriately configured document library on SharePoint Server 2010 running InfoPath Forms Services, the <b>InternalStartup</b> method is called only the first time the form template business logic assembly is loaded into an AppDomain on the server. This usually corresponds to the time the first user opens an instance of the form template during a session, or after the AppDomain is recycled during a session.</para>
      <para />
    </remarks>
    <example>
      <para>The following examples, show the <b>InternalStartup</b> method from a <b>FormCode</b> class (from the FormCode.cs or FormCode.vb files) of a form template that binds the event handlers for a form's <see cref="E:Microsoft.Office.InfoPath.FormEvents.Loading" /> event, a field's <see cref="E:Microsoft.Office.InfoPath.XmlEvent.Changed" /> event, and a Button control's <see cref="E:Microsoft.Office.InfoPath.ButtonEvent.Clicked" /> event using their corresponding delegates.</para>
      <para>
        <b>Important</b>: The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
      <code>public void InternalStartup()
{
   EventManager.FormEvents.Loading += 
      new LoadingEventHandler(FormEvents_Loading);
   EventManager.XmlEvents["/my:myFields/my:Name"].Changed += 
      new XmlChangedEventHandler(Name_Changed);
   ((ButtonEvent)EventManager.ControlEvents["MyBtn"]).Clicked += 
      new ClickedEventHandler(MyBtn_Clicked);
}</code>
      <code>Private Sub InternalStartup(ByVal sender As Object, _
   ByVal e As EventArgs) Handles Me.Startup
   AddHandler EventManager.FormEvents.Loading, _
      AddressOf FormEvents_Loading
   AddHandler EventManager.XmlEvents("/my:myFields/my:Name").Changed, _
      AddressOf Name_Changed
   AddHandler DirectCast(EventManager.ControlEvents("MyBtn"), _
      ButtonEvent).Clicked, AddressOf MyBtn_Clicked
End Sub</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.InfoPath.EventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlEvents">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Office.InfoPath.ControlEvents ControlEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.InfoPath.ControlEvents ControlEvents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.EventManager.ControlEvents" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ControlEvents As ControlEvents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Office::InfoPath::ControlEvents ^ ControlEvents { Microsoft::Office::InfoPath::ControlEvents ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlEvents : Microsoft.Office.InfoPath.ControlEvents" Usage="Microsoft.Office.InfoPath.EventManager.ControlEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.InfoPath.ControlEvents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:Microsoft.Office.InfoPath.ControlEvents" /> object for binding an event handler in the <b>InternalStartup</b> method of a form template.</summary>
        <value>A <see cref="T:Microsoft.Office.InfoPath.ControlEvents" /> object for binding an event handler in the <b>InternalStartup</b> method of a form template.</value>
        <remarks>
          <para>
            <b>Important</b>: The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands when designing the form template. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormEvents">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Office.InfoPath.FormEvents FormEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.InfoPath.FormEvents FormEvents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.EventManager.FormEvents" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FormEvents As FormEvents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Office::InfoPath::FormEvents ^ FormEvents { Microsoft::Office::InfoPath::FormEvents ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormEvents : Microsoft.Office.InfoPath.FormEvents" Usage="Microsoft.Office.InfoPath.EventManager.FormEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.InfoPath.FormEvents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:Microsoft.Office.InfoPath.FormEvents" /> object for binding an event handler in the <b>InternalStartup</b> method of a form template.</summary>
        <value>A <see cref="T:Microsoft.Office.InfoPath.FormEvents" /> object for binding an event handler in the <b>InternalStartup</b> method of a form template.</value>
        <remarks>
          <para>
            <b>Important</b>: The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEvents">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Office.InfoPath.XmlEvents XmlEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.InfoPath.XmlEvents XmlEvents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.EventManager.XmlEvents" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property XmlEvents As XmlEvents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Office::InfoPath::XmlEvents ^ XmlEvents { Microsoft::Office::InfoPath::XmlEvents ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlEvents : Microsoft.Office.InfoPath.XmlEvents" Usage="Microsoft.Office.InfoPath.EventManager.XmlEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.InfoPath.XmlEvents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:Microsoft.Office.InfoPath.XmlEvents" /> object for binding an event handler in the <b>InternalStartup</b> method of a form template.</summary>
        <value>An <see cref="T:Microsoft.Office.InfoPath.XmlEvents" /> object for binding an event handler in the <b>InternalStartup</b> method of a form template.</value>
        <remarks>
          <para>
            <b>Important</b>: The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>