<Type Name="ControlEvents" FullName="Microsoft.Office.InfoPath.ControlEvents">
  <TypeSignature Language="C#" Value="public abstract class ControlEvents" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ControlEvents extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.InfoPath.ControlEvents" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ControlEvents" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlEvents abstract" />
  <TypeSignature Language="F#" Value="type ControlEvents = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the collection of all event handlers for the <see cref="E:Microsoft.Office.InfoPath.ButtonEvent.Clicked" /> events raised by the Button controls on a form.</summary>
    <remarks>
      <para>The <b>ControlEvents</b> class and its <see cref="P:Microsoft.Office.InfoPath.ControlEvents.Item(System.String)" /> property are used to bind event handlers in the <b>InternalStartup</b> method of a form template's <b>FormCode</b> class (in the form template's FormCode.cs or FormCode.vb file) </para>
      <para />
    </remarks>
    <example>
      <para>The following example shows the <b>InternalStartup</b> method that binds the event handler for a Button control's <see cref="E:Microsoft.Office.InfoPath.ButtonEvent.Clicked" /> event using the <see cref="T:Microsoft.Office.InfoPath.ClickedEventHandler" /> delegate.</para>
      <para>
        <b>Important</b>: The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
      <para>[C#]</para>
      <para>public void InternalStartup()</para>
      <para>{</para>
      <para>   ((ButtonEvent)EventManager.ControlEvents["MyBtn"]).Clicked += </para>
      <para>      new ClickedEventHandler(MyBtn_Clicked);</para>
      <para>}</para>
      <para>[Visual Basic]</para>
      <para>Private Sub InternalStartup(ByVal sender As Object, _</para>
      <para>   AddHandler DirectCast(EventManager.ControlEvents("MyBtn"), _</para>
      <para>      ButtonEvent).Clicked, AddressOf MyBtn_Clicked</para>
      <para>End Sub</para>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ControlEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.InfoPath.ControlEvents.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ControlEvents();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public abstract object this[string controlId] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.ControlEvents.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public MustOverride ReadOnly Property Item(controlId As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ controlId); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.Office.InfoPath.ControlEvents.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">The ID of the Button control associated with the <b>Clicked</b> event.</param>
        <summary>Gets the <see cref="E:Microsoft.Office.InfoPath.ButtonEvent.Clicked" /> event associated with a Button control from the <see cref="T:Microsoft.Office.InfoPath.ControlEvents" /> collection.</summary>
        <value>The <see cref="E:Microsoft.Office.InfoPath.ButtonEvent.Clicked" /> event associated with the specified Button control.</value>
        <remarks>
          <para>
            <b>Important</b>: The code to bind event handlers using the <b>ControlEvents</b> class is not meant to be written by the developer in form code. When you add an event handler for a Button control to your form template from the design mode user interface, InfoPath generates code in the <b>InternalStartup</b> method of your form code file using the <see cref="T:Microsoft.Office.InfoPath.EventManager" /> class and the <b>ControlEvents</b> class to bind the <b>Clicked</b> events raised by Button controls to their event handlers. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
