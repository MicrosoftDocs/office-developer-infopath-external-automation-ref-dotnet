<Type Name="XmlEvents" FullName="Microsoft.Office.InfoPath.XmlEvents">
  <TypeSignature Language="C#" Value="public abstract class XmlEvents" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlEvents extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.InfoPath.XmlEvents" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlEvents" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlEvents abstract" />
  <TypeSignature Language="F#" Value="type XmlEvents = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>The collection of all <see cref="T:Microsoft.Office.InfoPath.XmlEvent" /> events for a form template.</summary>
    <remarks>
      <para>The <b>XmlEvents</b> collection and <b>XmlEvent</b> class are used to bind a document-level event (such as the <see cref="E:Microsoft.Office.InfoPath.XmlEvent.Changed" /> event for a field or group in a form's underlying XML document) to an event handler in the <b>InternalStartup</b> method at the beginning of the of the <b>FormCode</b> class in a managed code form template. At run time, the <b>InternalStartup</b> method is executed when the form template is opened to initialize the binding of all event handlers.</para>
      <para>
        <b>Important</b>: The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
      <para />
    </remarks>
    <example>
      <para>The example below shows code generated by InfoPath in the <b>InternalStartup</b> method to bind the event handler for a <see cref="E:Microsoft.Office.InfoPath.XmlEvent.Validating" /> event associated with a field in the form's underlying XML document using the <see cref="P:Microsoft.Office.InfoPath.XmlEvents.Item(System.String)" /> property of the <b>XmlEvents</b> class. It also shows the code generated for the <b>Changed</b> event of a field bound to the <b>CategoryName</b> column of a secondary data source named <b>Categories</b> using the <see cref="P:Microsoft.Office.InfoPath.XmlEvents.Item(System.String,System.String)" /> property of the XmlEvents class.</para>
      <code>public void InternalStartup()
{
   EventManager.XmlEvents["/my:myFields/my:field1"].Validating 
      += new XmlChangedEventHandler(field1_Validating);
   EventManager.XmlEvents[
      "/dfs:myFields/dfs:dataFields/d:Categories/@CategoryName", 
      "Categories"].Changed 
      += new XmlChangedEventHandler(
      Categories__CategoryName_attr_Changed);
}</code>
      <code>Private Sub InternalStartup(ByVal sender As Object, _
   ByVal e As EventArgs) Handles Me.Startup
   AddHandler EventManager.XmlEvents( _
      "/my:myFields/my:field1").Validating, _
      AddressOf field2_Validating
   AddHandler EventManager.XmlEvents( _
      "/dfs:myFields/dfs:dataFields/d:Categories/@CategoryName", _
      "Categories").Changed, _
      AddressOf Categories__CategoryName_attr_Changed
End Sub</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.InfoPath.XmlEvents.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlEvents();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Office.InfoPath.XmlEvent this[string xpath] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.InfoPath.XmlEvent Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.XmlEvents.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public MustOverride ReadOnly Property Item(xpath As String) As XmlEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Office::InfoPath::XmlEvent ^ default[System::String ^] { Microsoft::Office::InfoPath::XmlEvent ^ get(System::String ^ xpath); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Microsoft.Office.InfoPath.XmlEvent" Usage="Microsoft.Office.InfoPath.XmlEvents.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.InfoPath.XmlEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath of the node to which the event handler is bound.</param>
        <summary>Gets an <see cref="T:Microsoft.Office.InfoPath.XmlEvent" /> from the <see cref="T:Microsoft.Office.InfoPath.XmlEvents" /> collection for binding an event handler by specifying the XPath of the underlying XML document node that can raise the event.</summary>
        <value>The <see cref="T:Microsoft.Office.InfoPath.XmlEvent" /> associated with the form node to which the event handler is bound.</value>
        <remarks>
          <para>
            <b>Important</b>: The code to bind event handlers using the <b>XmlEvents</b> collection and <b>XmlEvent</b> class is not meant to be written by the developer in form code. The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Office.InfoPath.XmlEvent this[string xpath, string dataSourceName] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.InfoPath.XmlEvent Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.XmlEvents.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public MustOverride ReadOnly Property Item(xpath As String, dataSourceName As String) As XmlEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::Office::InfoPath::XmlEvent ^ default[System::String ^, System::String ^] { Microsoft::Office::InfoPath::XmlEvent ^ get(System::String ^ xpath, System::String ^ dataSourceName); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : Microsoft.Office.InfoPath.XmlEvent" Usage="Microsoft.Office.InfoPath.XmlEvents.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.InfoPath.XmlEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="dataSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath of the node to which the event handler is bound.</param>
        <param name="dataSourceName">The name of the secondary data source.</param>
        <summary>Gets an <see cref="T:Microsoft.Office.InfoPath.XmlEvent" /> from the <see cref="T:Microsoft.Office.InfoPath.XmlEvents" /> collection for binding an event handler by specifying the XPath of the underlying XML document node that can raise the event and the name of the secondary data source that supplies the data.</summary>
        <value>The <see cref="T:Microsoft.Office.InfoPath.XmlEvent" /> associated with the form node to which the event handler is bound.</value>
        <remarks>
          <para>
            <b>Important</b>: The code to bind event handlers using the <b>XmlEvents</b> collection and <b>XmlEvent</b> class is not meant to be written by the developer in form code. The <b>InternalStartup</b> method and the event binding code within it are generated by InfoPath when you add event handlers using various user interface commands. You should not create the <b>InternalStartup</b> method or write any additional code within it yourself. For information about how to add event handlers using interface commands, see How to: Add an Event Handler.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
