<Type Name="ViewInfo" FullName="Microsoft.Office.InfoPath.ViewInfo">
  <TypeSignature Language="C#" Value="public abstract class ViewInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ViewInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.InfoPath.ViewInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ViewInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class ViewInfo abstract" />
  <TypeSignature Language="F#" Value="type ViewInfo = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contains descriptive information about a view within a form.</summary>
    <remarks>
      <para>The <b>ViewInfo</b> object provides properties that can be used to get the name of a view and determine whether its name is hidden on the View menu when editing a form. The <b>ViewInfo</b> object is accessible through the <see cref="P:Microsoft.Office.InfoPath.XmlForm.ViewInfos" /> property of the <see cref="T:Microsoft.Office.InfoPath.XmlForm" /> object, and from the <see cref="P:Microsoft.Office.InfoPath.View.ViewInfo" /> property of a <see cref="T:Microsoft.Office.InfoPath.View" /> object.</para>
      <para>
        <b>Note</b>: To work with the view programmatically, use the <b>View</b> object.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ViewInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.InfoPath.ViewInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ViewInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public abstract string Caption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.ViewInfo.Caption" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Caption { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Caption : string" Usage="Microsoft.Office.InfoPath.ViewInfo.Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the <b>caption</b> attribute of the <b>xsf:view</b> element associated with the view in the form definition file (.xsf).</summary>
        <value>The value of the <b>caption</b> attribute of the <b>xsf:view</b> element associated with the view in the form definition file (.xsf)</value>
        <remarks>
          <para>By default, the value of the <b>caption</b> attribute of the <b>xsf:view</b> element is the same as the name given to the view when it was created in InfoPath form template design mode. As a result, the <b>Caption</b> property will return the same value as the <see cref="P:Microsoft.Office.InfoPath.ViewInfo.Name" /> property by default. </para>
          <para>The <b>Caption</b> property can be used to facilitate two scenarios:</para>
          <list type="bullet">
            <item>
              <description>To create a localized version of a view's name. You can save the form template files as source files (Save As Source Files on the File menu), and then hand edit the form definition file (.xsf) to change the value of the <b>caption</b> attribute of a <b>xsf:view</b> element to give the view a localized name. After doing so, the <b>Caption</b> property can be used to return the localized name. </description>
            </item>
            <item>
              <description>When InfoPath is hosted as a control using the <b>FormControl</b> in another application or in the <b>FormViewControl</b> on InfoPath Forms Services, the value of the <b>caption</b> attribute can be used to create a drop-down list for switching views. For example, when the selected item is changed the drop-down list control would use <b>FormControl.XmlForm.ViewInfos.SwitchView()</b> method to switch views using the view name value returned by the <b>Name</b> property, but using the localized value returned by the <b>Caption</b> property for user interface text.</description>
            </item>
          </list>
          <para>
            <b>Important</b>: When using a property to pass the name of a view to the <see cref="M:Microsoft.Office.InfoPath.ViewInfoCollection.SwitchView(System.String)" /> method, you should only use the value returned by the <b>Name</b> property.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HideName">
      <MemberSignature Language="C#" Value="public abstract bool HideName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.ViewInfo.HideName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property HideName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool HideName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HideName : bool" Usage="Microsoft.Office.InfoPath.ViewInfo.HideName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the name of the view is set to be hidden on the View menu.</summary>
        <value>
          <b>true</b> if the name of the view is set to be hidden; otherwise <b>false</b>.</value>
        <remarks>
          <para>The <b>HideName</b> property specifies whether the form designer set the Show on the View menu when filling out the form check box in the View Properties dialog box.</para>
          <para>This member can be accessed without restrictions.</para>
          <para>This type or member can be accessed only from code running in forms opened in Microsoft InfoPath Filler.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>HideName</b> property of the <b>ViewInfo</b> class is used to display whether the view named "View2" is configured to be hidden on the View menu.</para>
          <code>ViewInfo myViewInfo = this.ViewInfos["View2"];
MessageBox.Show("Is hidden: " + myViewInfo.HideName.ToString());</code>
          <code>Dim myViewInfo As ViewInfo  = Me.ViewInfos("View2")
MessageBox.Show("Is hidden: " &amp;amp; myViewInfo.HideName.ToString())</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.InfoPath.ViewInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.Office.InfoPath.ViewInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the view that is associated with the <see cref="T:Microsoft.Office.InfoPath.ViewInfo" /> object.</summary>
        <value>The name of the view that is associated with the <see cref="T:Microsoft.Office.InfoPath.ViewInfo" /> object.</value>
        <remarks>
          <para>The name of the <b>ViewInfo</b> object is the same as the name of the view that it represents. The name of the <b>ViewInfo</b> object can also be used as the argument to the <see cref="P:Microsoft.Office.InfoPath.ViewInfoCollection.Item(System.String)" /> property of the <see cref="T:Microsoft.Office.InfoPath.ViewInfoCollection" /> class.</para>
          <para>This member can be accessed without restrictions.</para>
          <para>This type or member can be accessed from code running in forms opened in Microsoft InfoPath Filler or in a Web browser.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Name</b> property of the <b>ViewInfo</b> class is used to display the name of the first view in the <b>ViewInfoCollection</b> in a message box.</para>
          <code>ViewInfo myViewInfo = this.ViewInfos[0];
MessageBox.Show("View name: " + myViewInfo.Name);</code>
          <code>Dim myViewInfo As ViewInfo  = Me.ViewInfos(0)
MessageBox.Show("View name: " &amp;amp; myViewInfo.Name)</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>