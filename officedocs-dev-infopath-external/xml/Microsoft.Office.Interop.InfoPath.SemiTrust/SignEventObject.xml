<Type Name="SignEventObject" FullName="Microsoft.Office.Interop.InfoPath.SemiTrust.SignEventObject">
  <TypeSignature Language="C#" Value="public interface SignEventObject : Microsoft.Office.Interop.InfoPath.SemiTrust.SignEvent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract SignEventObject implements class Microsoft.Office.Interop.InfoPath.SemiTrust.DocEvent, class Microsoft.Office.Interop.InfoPath.SemiTrust.DocReturnEvent, class Microsoft.Office.Interop.InfoPath.SemiTrust.SignEvent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.SemiTrust.SignEventObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface SignEventObject&#xA;Implements SignEvent" />
  <TypeSignature Language="C++ CLI" Value="public interface class SignEventObject : Microsoft::Office::Interop::InfoPath::SemiTrust::SignEvent" />
  <TypeSignature Language="F#" Value="type SignEventObject = interface&#xA;    interface SignEvent&#xA;    interface DocReturnEvent&#xA;    interface DocEvent" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.SemiTrust.DocEvent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.SemiTrust.DocReturnEvent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.SemiTrust.SignEvent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.CoClass(typeof(Microsoft.Office.Interop.InfoPath.SemiTrust.SignEventObjectWrapper))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.CoClass(typeof(Microsoft.Office.Interop.InfoPath.SemiTrust.SignEventObjectWrapper))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("096cd71d-0786-11d1-95fa-0080c78ee3bb")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("096cd71d-0786-11d1-95fa-0080c78ee3bb")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An event object that is used during the <see cref="E:Microsoft.Office.Interop.InfoPath.SemiTrust._XDocumentEventSink2_Event.OnSign" /> event.</summary>
    <remarks>
      <para>This type is a wrapper for a coclass that is required by managed code for COM interoperability. Use this type to access the members of the COM interface implemented by this coclass. For information about the COM interface, including a link to descriptions of its members, see<see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.SignEvent" />.</para>
      <para>Use the <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust.SignEvent.SignedDataBlock" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.SignedDataBlockObject" /> object to determine which set of data, which can be signed, is triggering the <b>OnSign</b> event. The <b>OnSign</b> event can be customized for a fully trusted form template only.</para>
      <para />
    </remarks>
    <example>
      <para>In the following example, the <b>SignEvent</b> object is used to add a signature and timestamp to a <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.SignedDataBlockObject" /> object:</para>
      <code>[InfoPathEventHandler(EventType=InfoPathEventType.OnSign)]
public void OnSign(&lt;span class="label"&gt;SignEvent&lt;/span&gt; e)
{
    Signature signature = e.SignedDataBlock.Signatures.Create();
    signature.Sign();
    // Countersign the signature with a trusted timestamp.
    // Get the XML node storing the signature block.
    IXMLDOMNode oNodeSig = signature.SignatureBlockXmlNode;
    IXMLDOMNode oNodeSigValue = oNodeSig.selectSingleNode(".//*[local-name(.)=’signatureValue’]");
    // Get time stamp from timestamp service (fictitious).
    MyTrustedTimeStampingService s = new MyTrustedTimeStampingService();
    string strVerifiedTimeStamp = s.AddTimeStamp(oNodeSigValue.text);
 
    //Add the value returned from the timestamping service to the 
    //unsigned part of the signature block.
    IXMLDOMNode oNodeObj = oNodeSig.selectSingleNode(".//*[local-name(.)=’Object’]");
    IXMLDOMNode oNode = oNodeObj.cloneNode(false);
    oNode.text = strVerifiedTimeStamp;
    oNodeObj.parentNode.appendChild(oNode);
    e.ReturnStatus = true;
}</code>
    </example>
  </Docs>
  <Members />
</Type>
