<Type Name="Window2" FullName="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2">
  <TypeSignature Language="C#" Value="public interface Window2 : Microsoft.Office.Interop.InfoPath.SemiTrust.Window" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Window2 implements class Microsoft.Office.Interop.InfoPath.SemiTrust.Window" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2" />
  <TypeSignature Language="VB.NET" Value="Public Interface Window2&#xA;Implements Window" />
  <TypeSignature Language="C++ CLI" Value="public interface class Window2 : Microsoft::Office::Interop::InfoPath::SemiTrust::Window" />
  <TypeSignature Language="F#" Value="type Window2 = interface&#xA;    interface Window" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.SemiTrust.Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096cd5f7-0786-11d1-95fa-0080c78ee3bb")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Activate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Activate();" />
      <MemberSignature Language="F#" Value="abstract member Activate : unit -&gt; unit" Usage="window2.Activate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.Activate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activates the window that is represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <remarks>
          <para>The <b>Activate</b> method can be used only with the editing window types; if used with a designing window type, it will return an error.</para>
          <para>To determine whether a window is the active window, use the <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Active" /> property.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms running in the same domain as the currently open form, or by forms that have been granted cross-domain permissions.</para>
          <para />
        </remarks>
        <example>
          <code>thisApplication.ActiveWindow.&lt;span class="label"&gt;Activate&lt;/span&gt;();</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Active" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Active" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.Active</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the window associated with the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object is the active window.</summary>
        <value>To be added.</value>
        <remarks>
          <para>To designate a window as the active window, use the <see cref="M:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Activate" /> method.</para>
          <para>
            <b>Important</b>: This member can be accessed without restrictions.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Caption : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(14)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the caption text for the window represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The caption text that is returned or set by this property corresponds to the text preceding "- InfoPath" on the title bar of the window</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms running in the same domain as the currently open form, or by forms that have been granted cross-domain permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Caption</b> property is used to set the caption text of the active window.</para>
          <code>string caption = "mycaption";
thisApplication.ActiveWindow.&lt;span class="label"&gt;Caption&lt;/span&gt; = caption;</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (bool fForce);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close(bool fForce) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Close(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (fForce As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(bool fForce);" />
      <MemberSignature Language="F#" Value="abstract member Close : bool -&gt; unit" Usage="window2.Close fForce" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.Close(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fForce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fForce">Determines whether open documents will be saved. The default value is <b>false</b>.</param>
        <summary>Closes the window that is represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <remarks>
          <para>The <b>Close</b> method will close the associated window and the forms that it contains. If the <paramref name="bForce" /> parameter is set to <b>true</b>, all forms will be closed without saving, even if they contain changes since they were last saved. If set to <b>false</b>, users will be prompted to save their changes.</para>
          <para>The <b>Close</b> method can be used only with the editing window types; if used with a designing window type, it will return an error. In addition, the <b>Close</b> method can only be used with the <see cref="E:Microsoft.Office.Interop.InfoPath.SemiTrust._XDocumentEventSink2_Event.OnSubmitRequest" /> and <see cref="E:Microsoft.Office.Interop.InfoPath.SemiTrust._ButtonEventSink_Event.OnClick" /> event handlers. If used with any other type of event handler, it will return an error.</para>
          <para>
            <b>Note</b>: If the window being closed is the only window open in Microsoft InfoPath, the InfoPath application will also be closed.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms running in the same domain as the currently open form, or by forms that have been granted cross-domain permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Close</b> method of the <b>Window</b> object is used to close the currently active window, forcing a save if changes in the form have occurred:</para>
          <code>thisApplication.ActiveWindow.&lt;span class="label"&gt;Close&lt;/span&gt;(false);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CommandBars">
      <MemberSignature Language="C#" Value="public object CommandBars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandBars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.CommandBars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBars As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandBars { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBars : obj" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.CommandBars" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.CommandBars</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the Microsoft Office <b>CommandBars</b> collection contained in the window that is associated with the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>CommandBars</b> collection can be used only by fully trusted forms. If used by a form that is not fully trusted, the <b>CommandBars</b> collection will return a "permission denied" error.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms opened from a form template that has been configured to run with full trust using the Security and Trust category of the Form Options dialog box. This member requires full trust for the immediate caller and cannot be used by partially trusted code. For more information, see "Using Libraries from Partially Trusted Code" on MSDN.</para>
          <para />
        </remarks>
        <example>
          <para>
            <b>Note</b>: The following example requires a reference to the <b>System.Reflection</b> namespace.</para>
          <code>BindingFlags flags = BindingFlags.GetProperty | BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance;

// The CommandBars collection returns only one of the objects 
// that implements an IDispatch interface.
// To perform checks and allow COM-like calls,
// you must create a wrapper by casting to the ObjectWrapper class.
ObjectWrapper commandBars = (ObjectWrapper)thisApplication.ActiveWindow.&lt;span class="label"&gt;CommandBars&lt;/span&gt;;

int commandBarsCount = (int)commandBars.InvokeByName(
           "Count",    // prop
           flags,
           null,      // arguments
           null);     // Culture

thisXDocument.UI.Alert("There are " + commandBarsCount.ToString() + " Command Bars");

// Either of the following two lines will work
object[] args =  new object[] {1};  
// object[] args =  new object[] {"Standard"};

// This object is outside the wrapper - this gets a .NET object

object commandBarItem = commandBars.InvokeByName(
           "Item",         
           flags,
           args,      // arguments
           null);     // Culture

thisXDocument.UI.Alert("Got the 'Standard' command bar");

string commandBarName = (string)commandBarItem.GetType().InvokeMember(
           "name",
           flags,
           null, 
           commandBarItem, 
           null);

thisXDocument.UI.Alert(commandBarName);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Height : int with get, set" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(13)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the window represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object, measured in points.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Height</b> property will return an error if it is set on a window that is minimized or maximized.</para>
          <para>The <b>Height</b> property can't be set to a value that is larger than the value returned by <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust._Application2.UsableHeight" />.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms opened from a form template that has been configured to run with full trust using the Security and Trust category of the Form Options dialog box. This member requires full trust for the immediate caller and cannot be used by partially trusted code. For more information, see "Using Libraries from Partially Trusted Code" on MSDN.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Left { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Left : int with get, set" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal position of the window represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object, measured in points.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Left</b> property will return an error if it is set on a window that is minimized or maximized.</para>
          <para>Setting the <b>Left</b> property to a position that is off the screen will cause the window to be displayed on the screen.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms opened from a form template that has been configured to run with full trust using the Security and Trust category of the Form Options dialog box. This member requires full trust for the immediate caller and cannot be used by partially trusted code. For more information, see "Using Libraries from Partially Trusted Code" on MSDN.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MailEnvelope">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.SemiTrust.MailEnvelopeObject MailEnvelope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.SemiTrust.MailEnvelopeObject MailEnvelope" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.MailEnvelope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MailEnvelope As MailEnvelopeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::SemiTrust::MailEnvelopeObject ^ MailEnvelope { Microsoft::Office::Interop::InfoPath::SemiTrust::MailEnvelopeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MailEnvelope : Microsoft.Office.Interop.InfoPath.SemiTrust.MailEnvelopeObject" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.MailEnvelope" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.MailEnvelope</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.SemiTrust.MailEnvelopeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.MailEnvelopeObject" /> object associated with the window that is represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>MailEnvelope</b> object can be used only with the editing window types; if used with a designing window type, it will return an error. It will also return an error if no form is open in the form area.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms running in the same domain as the currently open form, or by forms that have been granted cross-domain permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>MailEnvelope</b> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object is used to set a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.MailEnvelopeObject" /> object.</para>
          <code>&lt;span class="label"&gt;MailEnvelope&lt;/span&gt; myEnv = thisApplication.ActiveWindow.&lt;span class="label"&gt;MailEnvelope&lt;/span&gt;;</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="TaskPanes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection TaskPanes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection TaskPanes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.TaskPanes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TaskPanes As TaskPanesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::SemiTrust::TaskPanesCollection ^ TaskPanes { Microsoft::Office::Interop::InfoPath::SemiTrust::TaskPanesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TaskPanes : Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.TaskPanes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.TaskPanes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection" /> collection that is associated with the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>TaskPanesCollection</b> collection can be used only with the editing window types; if used with a designing window type, it will return an error.</para>
          <para>
            <b>Important</b>: This member can be accessed without restrictions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>TaskPanes</b> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object is used to set a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection" /> collection:</para>
          <code>TaskPanes taskPanes; 
taskPanes = thisXDocument.View.Window.&lt;span class="label"&gt;TaskPanes&lt;/span&gt;;</code>
          <para>In the following example, the <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanes.Item(System.Object)" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection" /> collection is used to set a reference to a specified <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPaneObject" /> object. Then the code uses the <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPane.Visible" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPaneObject" /> object to make the task pane visible.</para>
          <code>TaskPane taskPane;

// Show the built-in Help task pane.      
taskPane = thisXDocument.View.Window.&lt;span class="label"&gt;TaskPanes&lt;/span&gt;[4];
taskPane.Visible = true;
</code>
          <para>
            <b>Note</b>: The <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanes.Item(System.Object)" /> property argument is the type of task pane to return, based on the <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPane.TaskPaneType" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPaneObject" /> object, not the position of the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPaneObject" /> object in the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.TaskPanesCollection" /> collection.</para>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Top { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Top : int with get, set" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the vertical position of the window represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object, measured in points.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Top</b> property will return an error if it is set on a window that is minimized or maximized.</para>
          <para>Setting the <b>Top</b> property to a position that is off the screen will cause the entire window to be displayed on the screen.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms opened from a form template that has been configured to run with full trust using the Security and Trust category of the Form Options dialog box. This member requires full trust for the immediate caller and cannot be used by partially trusted code. For more information, see "Using Libraries from Partially Trusted Code" on MSDN.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Width : int with get, set" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the window represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object, measured in points.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Width</b> property will return an error if it is set on a window that is minimized or maximized.</para>
          <para>The <b>Width</b> property can't be set to a value that is larger than the value returned by the <see cref="P:Microsoft.Office.Interop.InfoPath.SemiTrust._Application2.UsableWidth" /> property.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms opened from a form template that has been configured to run with full trust using the Security and Trust category of the Form Options dialog box. This member requires full trust for the immediate caller and cannot be used by partially trusted code. For more information, see "Using Libraries from Partially Trusted Code" on MSDN.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As XdWindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::SemiTrust::XdWindowState WindowState { Microsoft::Office::Interop::InfoPath::SemiTrust::XdWindowState get(); void set(Microsoft::Office::Interop::InfoPath::SemiTrust::XdWindowState value); };" />
      <MemberSignature Language="F#" Value="member this.WindowState : Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowState with get, set" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.WindowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(15)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the state of the window represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>WindowState</b> property values are based on the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowState" /> enumeration.</para>
          <para>The state of an inactive window cannot be set. Use the <see cref="M:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.Activate" /> method to activate a window prior to setting the window state. </para>
          <para>
            <b>Important</b>: This member can be accessed only by forms running in the same domain as the currently open form, or by forms that have been granted cross-domain permissions.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowType WindowType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowType WindowType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.WindowType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowType As XdWindowType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::SemiTrust::XdWindowType WindowType { Microsoft::Office::Interop::InfoPath::SemiTrust::XdWindowType get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowType : Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowType" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.WindowType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.WindowType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.XdWindowType" /> value that indicates the type of window that is represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>WindowObject</b> objects represents the two types of windows that are used in the InfoPath application: the editing window that is used as the form area when a user fills out a form, and the designing window that is used as the design mode when a user designs a form.</para>
          <para>
            <b>Important</b>: This member can be accessed without restrictions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>WindowType</b> property of the <b>Window</b> object is used to determine the type of window that is the currently active window:</para>
          <code>if (thisApplication.ActiveWindow.WindowType == 0)
 thisXDocument.UI.Alert("The active window is an editing window.");
else
 thisXDocument.UI.Alert("The active window is a designing window.");</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="XDocument">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.SemiTrust.XDocument XDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.SemiTrust.XDocument XDocument" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.XDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XDocument As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::SemiTrust::XDocument ^ XDocument { Microsoft::Office::Interop::InfoPath::SemiTrust::XDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XDocument : Microsoft.Office.Interop.InfoPath.SemiTrust.XDocument" Usage="Microsoft.Office.Interop.InfoPath.SemiTrust.Window2.XDocument" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.SemiTrust.Window.XDocument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath.SemiTrust</AssemblyName>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.SemiTrust.XDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.XDocument" /> object that is associated with the window that is represented by the <see cref="T:Microsoft.Office.Interop.InfoPath.SemiTrust.WindowObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>XDocument</b> property can be used only with the editing window types; if used with a designing window type, it will return an error. It will also return an error if no form is open in the form area.</para>
          <para>
            <b>Important</b>: This member can be accessed only by forms running in the same domain as the currently open form, or by forms that have been granted cross-domain permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>XDocument</b> property of the <b>Window</b> object is used to set a reference to the form's underlying XML document that is associated with the currently active window:</para>
          <code>XDocument xDoc = thisApplication.ActiveWindow.&lt;span class="label"&gt;XDocument&lt;/span&gt;;</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>